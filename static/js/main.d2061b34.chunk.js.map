{"version":3,"sources":["index.js"],"names":["Component","React","PureComponent","render","ReactDOM","data","id","value","Total","this","props","AltCounter","onIncrementClick","onChange","onDecrementClick","className","onClick","Counter","onIncrement","onDecrement","App","context","valToAdd","counterIndex","state","findIndex","counter","clonedData","setState","prevState","total","valToSub","updatedVal","diff","reduce","accumulator","map","index","length","key","val","document","querySelector"],"mappings":"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","file":"static/js/main.d2061b34.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\nconst { Component, PureComponent } = React;\nconst { render } = ReactDOM;\n// state data for 3 counters\nconst data = [\n    { id: 1, value: 0 },\n    { id: 2, value: 0 },\n    { id: 3, value: 0 },\n    { id: 4, value: 0 }\n];\n\nclass Total extends PureComponent {\n    render() {\n        const { value } = this.props;\n        return <div>Total: {value}</div>;\n    }\n}\n\nclass AltCounter extends PureComponent {\n    onIncrementClick = () => this.props.onChange(this.props.value + 1);\n    onDecrementClick = () => this.props.onChange(this.props.value - 1);\n\n    render() {\n        const { value } = this.props;\n\n        return (\n            <div className=\"counter alternative\">\n                <b>{value}</b>\n                <div className=\"counter-controls\">\n                    <button\n                        onClick={this.onDecrementClick}\n                        className=\"button is-danger is-small\"\n                    >\n                        -\n                    </button>\n                    <button\n                        onClick={this.onIncrementClick}\n                        className=\"button is-success is-small\"\n                    >\n                        +\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Counter extends PureComponent {\n    onIncrementClick = () => this.props.onIncrement(1);\n    onDecrementClick = () => this.props.onDecrement(1);\n\n    render() {\n        const { value } = this.props;\n\n        return (\n            <div className=\"counter\">\n                <b>{value}</b>\n                <div className=\"counter-controls\">\n                    <button\n                        onClick={this.onDecrementClick}\n                        className=\"button is-danger is-small\"\n                    >\n                        -\n                    </button>\n                    <button\n                        onClick={this.onIncrementClick}\n                        className=\"button is-success is-small\"\n                    >\n                        +\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\nclass App extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            data: [...data],\n            total: data.reduce(\n                (accumulator, counter) => (accumulator += counter.value),\n                0\n            )\n        };\n    }\n\n    onIncrement = (id, valToAdd) => {\n        const counterIndex = this.state.data.findIndex(\n            counter => counter.id === id\n        );\n        const clonedData = [...this.state.data];\n        clonedData[counterIndex].value += valToAdd;\n        this.setState(prevState => ({\n            data: clonedData,\n            total: prevState.total + valToAdd\n        }));\n    };\n\n    onDecrement = (id, valToSub) => {\n        const counterIndex = this.state.data.findIndex(\n            counter => counter.id === id\n        );\n        const clonedData = [...this.state.data];\n        clonedData[counterIndex].value -= valToSub;\n        this.setState(prevState => ({\n            data: clonedData,\n            total: prevState.total - valToSub\n        }));\n    };\n\n    onChange = (id, updatedVal) => {\n        const counterIndex = this.state.data.findIndex(\n            counter => counter.id === id\n        );\n        const clonedData = [...this.state.data];\n        const diff = updatedVal - clonedData[counterIndex].value;\n        clonedData[counterIndex].value = updatedVal;\n        this.setState(prevState => ({\n            data: clonedData,\n            total: prevState.total + diff\n        }));\n    };\n\n    render() {\n        const { total } = this.state;\n        return (\n            <div>\n                {data.map((counter, index) =>\n                    index !== data.length - 1 ? (\n                        <Counter\n                            key={counter.id}\n                            value={counter.value}\n                            onIncrement={val =>\n                                this.onIncrement(counter.id, val)\n                            }\n                            onDecrement={val =>\n                                this.onDecrement(counter.id, val)\n                            }\n                        />\n                    ) : (\n                        <AltCounter\n                            key={counter.id}\n                            value={counter.value}\n                            onChange={val => this.onChange(counter.id, val)}\n                        />\n                    )\n                )}\n\n                <Total value={total} />\n            </div>\n        );\n    }\n}\nrender(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}